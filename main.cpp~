#include <iostream>
#include <fstream>
#include <time.h>
#include <stdio.h>
#include <complex.h>

#include "ofs.h"
#include "otsh.h"
#include "ots.h"
#include "oftsh.h"
#include "ofts.h"
#include "ftda.h"

#include "qbtbp.h"
#include "qbtbp_ofs.h"
#include "tests.h"

//GSL
#include <gsl/gsl_odeiv2.h>
#include <gsl_interp.h>
#include <gsl/gsl_roots.h>
#include <gsl/gsl_blas.h>
#include <gsl/gsl_eigen.h>

//Custom
#include "custom_ode.h"

using namespace std;


//--------------------------------------------------------------------------------------------------//
//			QUASI-BICIRCULAR THREE-BODY PROBLEM
//--------------------------------------------------------------------------------------------------//

void time_mul(int deg_max, int nvar);
void time_mul_FT(int deg_max, int nvar);

#ifdef __APPLE__
time_t TIC_TIME;
#else
struct timespec TIC_TIME;
#endif

void tic(void)
{
#ifdef __APPLE__
    TIC_TIME = clock();
#else
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &TIC_TIME);
#endif
}

double toc(void)
{
#ifdef __APPLE__
    time_t toc_time;
    toc_time = clock();
    return (double)(toc_time - TIC_TIME) / CLOCKS_PER_SEC;
#else
    struct timespec toc_time;
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &toc_time);
    return (double)(toc_time.tv_sec - TIC_TIME.tv_sec) +
           (double)(toc_time.tv_nsec - TIC_TIME.tv_nsec) / 1e9;
#endif
}

#define MP_DOUBLE_TYPE 1
#define MP_COMPLEX_TYPE 2

/*
#define MP_BASE_TYPE MP_COMPLEX_TYPE
typedef complex double varType;
//*/

///*
#define MP_BASE_TYPE MP_DOUBLE_TYPE
typedef double varType;
//*/

typedef Ots<varType> oftsVarType;

#if MP_BASE_TYPE == MP_DOUBLE_TYPE
#define MY_CONST (1.0)
#endif

#if MP_BASE_TYPE == MP_COMPLEX_TYPE
#define MY_CONST (1.0 + _Complex_I*1.0)
#endif


void qbtbp (Ofts<double complex> &ofts_z, Ofts<double complex> &ofts_Z, double n, double ms, double as);
int main()
{

    int nr = 30;
    int nv = 4;

    FTDA::init(nv, nr);


    //----------------------------------------------------------------------------------------------------------
    // Quasi Bicircular TBP resolution (bj's and cj's) - Taylor Implementation
    //----------------------------------------------------------------------------------------------------------
    /*
        Ofts< Ots<varType> > ofts_z(1,30,2,40);
        Ofts< Ots<varType> > ofts_Z(1,30,2,40);

        double as = 388.81114;
        double omegas = 0.925195985520347;
        double ns =1-omegas;
        double ms = ns*ns*pow(as,3.0)-1;
        double n = 1-ns;

        tic();
        qbtbp(ofts_z, ofts_Z, n, ms, as, ns);
        double diff = toc();

        cout << "CPU time: " << diff << endl;
    //*/

    //----------------------------------------------------------------------------------------------------------
    // Quasi Bicircular TBP resolution (bj's and cj's) - Fourier Implementation
    //----------------------------------------------------------------------------------------------------------
    ///*
    int nf = 20;
    Ofts< Ofs<varType> > ofts_z(1,30,2,nf);
    Ofts< Ofs<varType> > ofts_Z(1,30,2,nf);

    Ofs<double complex> bjc(nf);
    Ofs<double complex> cjc(nf);

    double as = 388.81114;
    double omegas = 0.925195985520347;
    double ns =1-omegas;
    double ms = ns*ns*pow(as,3.0)-1;
    double n = 1-ns;
    double mu = 0.0121505816;
    tic();
    qbtbp_ofs(bjc, cjc, ofts_z, ofts_Z, n, ms, as, ns);
    double diff = toc();

    cout << "CPU time: " << diff << endl;
    //*/

    //----------------------------------------------------------------------------------------------------------
    // Integration & Analytical Vs Numerical results
    //----------------------------------------------------------------------------------------------------------
    ///*
    //Stepper
    const gsl_odeiv2_step_type *T = gsl_odeiv2_step_rk8pd;
    custom_ode_structure ode_s;
    //Root-finding
    const gsl_root_fsolver_type *T_root = gsl_root_fsolver_brent; //Brent-Dekker root finding method
    //Ode solver parameters
    double param[2];
    param[0] = mu;
    param[1] = ms;
    //General structures
    init_ode_structure(&ode_s, T, T_root, 1e-14, 1e-14, 1e-12, 1e-12, 8, 1e-6,  qbtbp_derivatives, NULL, param);
    //Analytical Vs Numerical results
    analyticVsnumeric(2*M_PI, bjc, cjc, ode_s, as, n, ns);
    //analyticVsnumeric(2*M_PI, bj_student, cj_student, ode_s, as, n, ns);  //use it to test the results from Josep's student implementation
    //*/


    return 0;
}
